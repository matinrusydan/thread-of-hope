generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String     @default("user")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  adminUser     AdminUser?
  curhats       Curhat[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Curhat {
  id         String    @id @default(cuid())
  title      String
  content    String
  authorName String
  isApproved Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String?
  author     User?     @relation(fields: [authorId], references: [id])
  comments   Comment[]
  likes      CurhatLike[]
}

model CurhatLike {
  id       String  @id @default(cuid())
  curhatId String
  curhat   Curhat @relation(fields: [curhatId], references: [id], onDelete: Cascade)
  userId   String? // null for anonymous users
  clientId String  // unique identifier for anonymous users

  @@unique([curhatId, clientId])
}

model Ebook {
  id             String   @id @default(cuid())
  title          String
  description    String?
  coverImagePath String?
  author         String
  category       String   @default("general")
  isPublished    Boolean  @default(false)
  isFeatured     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  externalUrl    String
  viewCount      Int      @default(0)
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  authorName String?  // null for anonymous
  curhatId   String
  curhat     Curhat   @relation(fields: [curhatId], references: [id], onDelete: Cascade)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model CommunityMember {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  phone         String?
  age           Int
  city          String
  occupation    String?
  motivation    String
  howDidYouHear String
  isApproved    Boolean? // null = pending, true = approved, false = rejected
  joinedAt      DateTime @default(now())
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  eventDate   DateTime?
  location    String?
  imagePath   String?
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  imagePath   String
  category    String   @default("general")
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminUser {
  id        String   @id
  role      String   @default("admin")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
}
